#![allow(dead_code)]
#![allow(unused_variables)]
#![allow(unused_mut)]
#![allow(unused_assignments)]
fn main() {
    let wizard1 = "Merlin";
    println!("magician1 is {}.",wizard1);
    
    let greeting = "Hello, world";
    printer(greeting);
    
    let wizard2: &str = "Gandalf";
    printer(wizard2);
    
    let mut name = String::from("Chimezie");
    
    // printer1(name);
    
    let mut mother = String::with_capacity(55);
    mother = "Anna".to_string();
    
    // printer1(mother);
    
    let mut car = String::new();
    car = "Honda".to_string();
    printer1(car);
    
    // let str_slice1 = &car[..];
    
    
    // mother.push('a');
    // printer1(mother);
    mother.push_str(" is the best mom in the world");
    // printer1(mother);
    
    // for letter in magician1.chars() {
        // print!("{}-",letter);
    // }
    for word in mother.split(" ") {
        print!("{} /", word);
    }
    let modified_name = name.replace("Chimezie","Anthony");
    println!();
    printer1(modified_name);
    let str1 = "Happy".to_string();
    let str2 = " New year";
    let str3 = str1 + str2;
    printer1(str3);
}

fn printer(a_string: &str) {
    println!("{}.", a_string);
}
fn printer1(some_string: String) {
    println!("Hello, {}.", some_string);
}



 //TRIANGULAR PEG SOLITAIRE
 fn main() {

    //SLIGTHLY MODIFIED INSTRUCTORS CODE

    let start = 0b011111111111111;

    let stop = 0b100000000000000;

  //  println!("board is {:015b}", board);

    solve_board(start,stop);
}

fn print_board(board: u16, prev_board: u16) {

    let how_to_print = [
        (4, 14, 1),
        (3, 12, 0), (1, 13, 1),
        (2, 11, 0), (1, 10, 0), (1, 9, 1),
        (1,  8, 0), (1,  7, 0), (1, 6, 0), (1, 5, 1),
        (0,  4, 0), (1,  3, 0), (1, 2, 0), (1, 1, 0), (1, 0, 2),
    ];

    let changed_positions = board ^ prev_board;


    // the order of pegs and holes are reversed because of the recursive call of the solve_board()

    for (space, position, newline) in &how_to_print {

        for _ in 0..*space {

            print!(" ");//prints spaces on each line
        }
        let changed = changed_positions  & 1 << position != 0;

        if changed  {
            print!("\x1b[1;31m");
        }

        if board & 1 << *position != 0 { //supposed to print P,but prints holes on the board
            print!("h");
        }
        else {
            print!("P"); //supposed to print h, but prints the pegs on the board

        }

        if changed {
            print!("\x1b[m");
        }

        for _ in 0..*newline {//prints newlines
            println!();
        }

    }
}
//determines if a peg is present or not
fn peg_here(board: u16, location: u16) -> bool {
    board & 1 << location != 0
}

//solve board function checks for legal moves and prints them all.
fn solve_board(board: u16, board_we_want: u16) -> bool {

    let possible_moves = [
        //horizontal
        (11, 10, 9),(9, 10, 11),(8,  7, 6),(6,  7,  8),(7,  6,  5),(5,  6,  7),
        (4,   3, 2),(2,  3,  4),(3,  2, 1),(1,  2,  3),(2,  1,  0),(0,  1,  2),
        //north-east/south-west
        (4,   8, 11),(11, 8, 4),(8, 11, 12),(12, 11, 8),(11, 12, 14),(14, 12, 11),
        (3,   7, 10),(10, 7, 3),(7, 10, 13),(13, 10, 7),( 2,  6,  9),( 9,  6,  2),
        //north-west\south-east
        (14,  13, 9),( 9, 13, 14),(13, 9, 5),( 5,  9, 13),( 9,  5, 0),( 0,  5,  9),
        (12,  10, 6),( 6, 10, 12),(10, 6, 1),( 1,  6, 10),(11,  7, 2),( 2, 7, 11),
    ];


    // if board is already solved
    if board == board_we_want {

        print_board(board_we_want,board);

        return true;
    }


    // check possible moves
    for moves in &possible_moves  {

        let (start, over, to) = moves;

        if !peg_here(board,*over) {// if over isn't empty, this move is illegal, so unjump.
            continue;
        }
        if !peg_here(board,*start) {//if start position is empty, this move is illegal.
            continue;
        }

        if peg_here(board,*to) {//if to position is filled, this move is illegal.
            continue;
        }

        //if we get here and all the moves are illegal, we reset the board, call solve_board()
        //again and print the current state of the board.
        let new_board = board ^ 1 << *start ^ 1 << *over ^ 1 << *to;

        if solve_board(new_board,board_we_want) {

            print_board(new_board,board);

            return true;
        }

    }
    return false;
}
